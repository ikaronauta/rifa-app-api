Conectarse a postgres: 
sudo -u postgres psql -d rifa_db
\c nombre_de_base;

CREATE DATABASE rifa_db;
CREATE USER rifa_admin WITH ENCRYPTED PASSWORD 'Adm1n@123*';
GRANT ALL PRIVILEGES ON DATABASE rifa_db TO rifa_admin;

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    celular VARCHAR(10) NOT NULL,
    tipo VARCHAR(20) DEFAULT 'usuario' NOT NULL,
    auth_provider VARCHAR(50),
    email_verificado BOOLEAN DEFAULT FALSE NULL,
    email_token VARCHAR(255) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE boletas (
    id SERIAL PRIMARY KEY,
    numero VARCHAR(4) UNIQUE NOT NULL,
    estado INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE compras (
    id SERIAL PRIMARY KEY,
    usuario_id INT NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    boleta_id INT NOT NULL UNIQUE REFERENCES boletas(id) ON DELETE CASCADE,
    pagado BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sessions (
    sid TEXT PRIMARY KEY,
    sess JSON NOT NULL,
    expire TIMESTAMPTZ NOT NULL
);

//Dar permiso sobre tablas
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO rifa_admin;


INSERT INTO usuarios (nombre, email, password, celular, tipo, auth_provider, email_verificado, email_token) 
VALUES ('Admin', 'ortizgalindoj@gmail.com', '', '3053865489', 'admin', 'manual', true, '');

INSERT INTO boletas (numero) 
VALUES (1001), (1002), (1003), (1004), (1005);

SELECT *
FROM sessions

SELECT * FROM usuarios WHERE email = 'maria@test.com'

--DELETE FROM sessions

return

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO rifa_admin;
GRANT USAGE, SELECT, UPDATE ON SEQUENCE usuarios_id_seq TO rifa_admin;
REVOKE ALL ON ALL TABLES IN SCHEMA public FROM rifa_admin;

INSERT INTO boletas (numero, estado)
SELECT LPAD(i::TEXT, 4, '0'), 0
FROM generate_series(0, 9999) AS i;

CREATE OR REPLACE FUNCTION seleccionar_boleta()
RETURNS TABLE(id INT, numero VARCHAR, estado INT) AS $$
DECLARE
    boleta_id INT;
    boleta_numero VARCHAR;
    boleta_estado INT;
BEGIN
    -- Seleccionar una boleta aleatoria disponible con bloqueo
    WITH boleta_seleccionada AS (
        SELECT b.id, b.numero, b.estado
        FROM boletas b
        WHERE b.estado = 0
        ORDER BY RANDOM()
        LIMIT 1
        FOR UPDATE SKIP LOCKED
    )
    UPDATE boletas b
    SET estado = 1
    WHERE b.id IN (SELECT bs.id FROM boleta_seleccionada bs)
    RETURNING b.id, b.numero, b.estado INTO boleta_id, boleta_numero, boleta_estado;

    -- Si no se encontr√≥ una boleta disponible, salir sin retornar datos
    IF boleta_id IS NULL THEN
        RETURN;
    END IF;

    -- Retornar la boleta seleccionada
    RETURN QUERY SELECT boleta_id, boleta_numero, boleta_estado;
END;
$$ LANGUAGE plpgsql;




